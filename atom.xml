<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Done Well]]></title>
  <link href="http://mdarnall.github.io/atom.xml" rel="self"/>
  <link href="http://mdarnall.github.io/"/>
  <updated>2013-11-22T14:39:38-08:00</updated>
  <id>http://mdarnall.github.io/</id>
  <author>
    <name><![CDATA[Matt Darnall]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Dreamforce '13]]></title>
    <link href="http://mdarnall.github.io/posts/dreamforce-13/"/>
    <updated>2013-11-21T14:45:00-08:00</updated>
    <id>http://mdarnall.github.io/posts/dreamforce-13</id>
    <content type="html"><![CDATA[<p>I had a great time presenting at <a href="https://www.salesforce.com/dreamforce/DF13/">Dreamforce &lsquo;13</a>. After getting home and having time to reflect on the experience I wanted to do a quick summary of my thoughts.</p>

<h3>The Session</h3>

<p>I was super excited to talk about unit testing iOS applications &ndash; it&rsquo;s been a really fun topic to learn about the past 6 months. The general topic can be so large it&rsquo;s hard to condense that down to 45 minutes, so I tried to focus it on what has had the most impact for me lately.</p>

<p>If I could summarize my session it would be this:</p>

<blockquote><p>Testing doesn&rsquo;t have to be an afterthought in iOS. <a href="http://bit.ly/17Wg11i">Find the tools and frameworks</a> that support efficiency and happiness while using the <a href="http://bit.ly/1dYzyQc">Magic Tricks of Unit Testing</a> to write tests you will love. We also need to spread the word about testing in iOS!</p></blockquote>

<h3>Questions at the end</h3>

<p>I got some really good feedback at the end of my session. Here are couple things we talked about:</p>

<h5>API Drift and Mock objects.</h5>

<p>I was asked whether or not using Mock objects can lead to situations where your unit tests pass but the application is broken. This was a great question &ndash; It&rsquo;s true that using mock objects (a form of a Fake) can cause what is known as &ldquo;API Drift&rdquo;. API Drift is when your Fake object drifts from the contract of the object it is faking. In these cases you can have tests that seemingly pass while your application is broken.</p>

<p>It&rsquo;s up to the developer to make sure the fake object honors the contract of the object it is faking. It turns out to be easy with Objective-C and OCMock &ndash; the compiler won&rsquo;t let you stub or mock calls to selectors that don&rsquo;t exist.</p>

<p><img src="http://mdarnall.github.io/images/api_drift.png" /></p>

<p>This is one of the great things about the compiled nature of Objective-C. With Ruby you have to usually take another step and say <code>call_original</code> so that if the method doesn&rsquo;t exist on the real object you fail the test.</p>

<h5>Is TDD Possible with iOS?</h5>

<p>I was asked whether or not TDD was possible with iOS. My answer is YES! I love TDD &ndash; the demo application was created with TDD. Part of this is the tools and frameworks you use to help support TDD &ndash; I&rsquo;d say the biggest one for me has been using <a href="www.jetbrains.com/objc/">AppCode</a> with all of it&rsquo;s powerful features for refactoring and navigation of a code base.</p>

<p>A great read on TDD in iOS is <a href="http://amzn.to/17sFuyJ">Graham Lee&rsquo;s book on the topic</a>. Jon Reid also has <a href="http://bit.ly/1dgxG5X">several good screencasts </a> on TDD in context of iOS.</p>

<h3>Slides</h3>

<script async class="speakerdeck-embed" data-id="0b20cce033f30131561206dd63e41523" data-ratio="1.77777777777778" src="http://mdarnall.github.io//speakerdeck.com/assets/embed.js"></script>


<h3>Links</h3>

<p>The various links from my talk:</p>

<ul>
<li><p><a href="http://bit.ly/HvRbZQ">My link bundle that contains links to resources I&rsquo;ve used to learn iOS unit testing</a></p></li>
<li><p><a href="http://bit.ly/17Wg11i">My blog post about the tools and frameworks we are using</a></p></li>
<li><p><a href="http://bit.ly/I2NDyB">Demo App Source Code</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My iOS Unit Testing Toolbox]]></title>
    <link href="http://mdarnall.github.io/posts/my-ios-unit-testing-toolbox/"/>
    <updated>2013-11-13T18:15:00-08:00</updated>
    <id>http://mdarnall.github.io/posts/my-ios-unit-testing-toolbox</id>
    <content type="html"><![CDATA[<p>For the past 6 months I&rsquo;ve been doing iOS development for <a href="http://salesforce.com">Salesforce</a>. Having spent most of my previous time doing JavaScript, Ruby and .NET development I&rsquo;d gotten used to certain tools to accomplish my daily workflow. This is a quick writeup on the tools I&rsquo;m currently using to get a similar experience in iOS.</p>

<h3>Testing Frameworks</h3>

<p>I&rsquo;m big on unit testing &ndash; I mean I love it, and I love TDD. So naturally the tools I use need to support that workflow. I&rsquo;ve come to really love BDD style unit testing frameworks in <a href="https://github.com/rspec/rspec">Ruby with RSpec</a> and <a href="http://visionmedia.github.io/mocha/">Mocha</a> for JavaScript &ndash; so this was the first tool I went looking for.</p>

<p>In the Objective-C community there are several frameworks, that at the surface, offered the BDD style I was looking for:</p>

<ul>
<li><a href="https://github.com/allending/Kiwi">Kiwi</a> &ndash; &ldquo;Simple BDD for iOS&rdquo;</li>
<li><a href="https://github.com/pivotal/cedar">Cedar</a> &ndash; &ldquo;BDD style testing for Objective-C&rdquo;</li>
<li><a href="https://github.com/specta/specta">Specta</a> &ndash; &ldquo;A light-weight TDD / BDD framework for Objective-C &amp; Cocoa&rdquo;</li>
</ul>


<p>All three have similar features and support the style you would expect. Here is an example of using Specta to describe an objects behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">import</span> <span class="s">&quot;specta.h&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecBegin</span><span class="p">(</span><span class="n">Thing</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span><span class="p">(</span><span class="s">@&quot;Thing&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">beforeAll</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is run once and only once before all of the examples</span>
</span><span class='line'>    <span class="c1">// in this group and before any beforeEach blocks.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">beforeEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is run before each example.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should do stuff&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is an example block. Place your assertions here.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should do some stuff asynchronously&quot;</span><span class="p">,</span> <span class="o">^</span><span class="n">AsyncBlock</span> <span class="p">{</span>
</span><span class='line'>    <span class="c1">// Async example blocks need to invoke done() callback.</span>
</span><span class='line'>    <span class="n">done</span><span class="p">();</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>  <span class="n">describe</span><span class="p">(</span><span class="s">@&quot;Nested examples&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="n">it</span><span class="p">(</span><span class="s">@&quot;should do even more stuff&quot;</span><span class="p">,</span> <span class="o">^</span><span class="p">{</span>
</span><span class='line'>      <span class="c1">// ...</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">pending</span><span class="p">(</span><span class="s">@&quot;pending example&quot;</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">afterEach</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is run after each example.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">afterAll</span><span class="p">(</span><span class="o">^</span><span class="p">{</span>
</span><span class='line'>    <span class="c1">// This is run once and only once after all of the examples</span>
</span><span class='line'>    <span class="c1">// in this group and after any afterEach blocks.</span>
</span><span class='line'>  <span class="p">});</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="n">SpecEnd</span>
</span></code></pre></td></tr></table></div></figure>


<p>After playing with each of the three I decided to go with Specta and have been really happy with that choice. My criteria was based on:</p>

<ul>
<li>The ability to easily add the framework to an existing XCode project.</li>
<li>The ability to write asynchronous test cases. Often I&rsquo;d need to test objects that take block arguments for callbacks &ndash; this was a must.</li>
<li>Integration into other mainstream tools. XCTool and XCode are well supported with Specta.</li>
<li>A good project &ldquo;pulse&rdquo; on <a href="https://github.com/specta/specta/pulse/monthly">GitHub</a>.</li>
</ul>


<h3>Matcher Library</h3>

<p>Along with a good BDD style testing framework I wanted to find a matcher library that gave me a more fluent, readable syntax similar to that of RSpec or <a href="http://chaijs.com/">Chai</a> in JavaScript. Something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="n">expect</span><span class="p">(</span><span class="s">@&quot;foo&quot;</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="s">@&quot;foo&quot;</span><span class="p">);</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">foo</span><span class="p">).</span><span class="n">notTo</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="n">expect</span><span class="p">([</span><span class="n">bar</span> <span class="n">isBar</span><span class="p">]).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="n">YES</span><span class="p">);</span>
</span><span class='line'><span class="n">expect</span><span class="p">(</span><span class="n">baz</span><span class="p">).</span><span class="n">to</span><span class="p">.</span><span class="n">equal</span><span class="p">(</span><span class="mf">3.14159</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>The Specta project came to the rescue again with <a href="https://github.com/specta/expecta">Expecta</a>. It has proven to work well and provides a lot of features:</p>

<ul>
<li>A good set of built-in <a href="https://github.com/specta/expecta#built-in-matchers">matchers</a></li>
<li>The ability to define your own matchers</li>
<li>Dynamic predicate matchers. Being able to write something like <code>expect(lightSwitch).isTurnedOn();</code>  with minimal effort is great.</li>
<li>Testing framework agnostic. Expecta will work with not just Specta but other testing frameworks.</li>
<li>A good project &ldquo;pulse&rdquo; on <a href="https://github.com/specta/expecta/pulse/monthly">GitHub</a></li>
</ul>


<h3>Isolation Library</h3>

<p>In unit testing I often make use of an <a href="http://osherove.com/blog/2008/9/20/goodbye-mocks-farewell-stubs.html">Isolation Library</a>. While these are often referred to as Mock libraries, it&rsquo;s really just a library for making fake objects on the fly. I primarily need Mock and Stub objects and so far I&rsquo;ve been using <a href="http://ocmock.org">OCMock</a> with good success.</p>

<p>Often with fake objects you want to create Stub objects that are not &ldquo;strict&rdquo; &ndash; meaning they don&rsquo;t complain if methods you didn&rsquo;t explicitly setup are called. One bummer is that with OCMock you must remember to create a &ldquo;Nice Mock&rdquo; in order to get that behavior:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="kt">id</span> <span class="n">mock</span> <span class="o">=</span> <span class="p">[</span><span class="n">OCMockObject</span> <span class="nl">niceMockForClass:</span><span class="p">[</span><span class="n">SomeClass</span> <span class="n">class</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Argument constraints are another important feature for Mock objects. OCMock has a decent set of built-in argument constraints, and when the built-in constraints won&rsquo;t cut it you can reach for a custom predicate constraint via a block you implement:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="p">[[</span><span class="n">mock</span> <span class="n">expect</span><span class="p">]</span> <span class="nl">someMethod:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="nl">checkWithBlock:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">value</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="cm">/* return YES if value is ok */</span>
</span><span class='line'><span class="p">}]];</span>
</span></code></pre></td></tr></table></div></figure>


<p>This actually turns out to be the way you can mock calls of methods that take block arguments. In a recent project we had an API Client object that used <a href="https://github.com/AFNetworking/AFNetworking">AFNetworking</a> to implement it&rsquo;s HTTP communication. Each method call would take a callback for when that communication completed. For unit tests that needed to Stub or Mock this interaction I used the following approach:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='obj-c'><span class='line'><span class="c1">// stub out the call to doAPIWork and callback with an error condition</span>
</span><span class='line'><span class="p">[[</span><span class="n">client</span> <span class="n">stub</span><span class="p">]</span> <span class="n">doAPIWork</span> <span class="nl">callback:</span><span class="p">[</span><span class="n">OCMArg</span> <span class="nl">checkWithBlock:</span><span class="o">^</span><span class="kt">BOOL</span><span class="p">(</span><span class="kt">id</span> <span class="n">param</span><span class="p">){</span>
</span><span class='line'>    <span class="c1">// cast the param to our block type</span>
</span><span class='line'>    <span class="kt">void</span> <span class="p">(</span><span class="o">^</span><span class="n">passedBlock</span><span class="p">)(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">,</span> <span class="n">NSError</span> <span class="o">*</span><span class="p">)</span> <span class="o">=</span> <span class="n">param</span><span class="p">;</span>
</span><span class='line'>    <span class="c1">// call the passed block back with our stubbed response</span>
</span><span class='line'>    <span class="n">passedBlock</span><span class="p">(</span><span class="nb">nil</span><span class="p">,</span> <span class="p">[</span><span class="n">NSError</span> <span class="nl">errorWithDomain:</span><span class="s">@&quot;&quot;</span> <span class="nl">code:</span><span class="mi">500</span> <span class="nl">userInfo:</span><span class="err">@</span><span class="p">{}]);</span>
</span><span class='line'>    <span class="c1">// indicate that the argument was fine to OCMock</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">YES</span><span class="p">;</span>
</span><span class='line'><span class="p">}]];</span>
</span><span class='line'>
</span></code></pre></td></tr></table></div></figure>


<p>That being said &ndash; I&rsquo;m would encourage others to also evaluate <a href="https://github.com/jonreid/OCMockito">OCMockito</a> from <a href="http://qualitycoding.org/">Jon Reid</a>. Some key differences are:</p>

<ul>
<li><p>Mock objects are always &ldquo;nice,&rdquo; recording their calls instead of throwing exceptions about unspecified invocations. This makes tests less fragile.</p></li>
<li><p>No expect-run-verify, making tests more readable. Mock objects record their calls, then you verify the methods you want.</p></li>
<li><p>Verification failures are reported as unit test failures, identifying specific lines instead of throwing exceptions. This makes it easier to identify failures.</p></li>
</ul>


<h3>Test Runner</h3>

<p>Writing tests is important, but equally important is running those tests to get feedback and to quickly iterate during development. For running tests I&rsquo;ve been making heavy use of <a href="https://github.com/facebook/xctool">XCTool</a>. XCTool is a tool for building and testing your application at the command line. This was big not only for those who prefer that local development environment but for running the tests during Continuous Integration on a remote server.</p>

<p>One thing I quickly added to our project was XCTool&rsquo;s ability to have default arguments passed to the command by having a <code>.xctool-args</code> file in the root of your project.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">[</span>
</span><span class='line'>  <span class="s2">&quot;-workspace&quot;</span><span class="p">,</span> <span class="s2">&quot;YourWorkspace.xcworkspace&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;-scheme&quot;</span><span class="p">,</span> <span class="s2">&quot;YourScheme&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;-configuration&quot;</span><span class="p">,</span> <span class="s2">&quot;Debug&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;-sdk&quot;</span><span class="p">,</span> <span class="s2">&quot;iphonesimulator&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;-arch&quot;</span><span class="p">,</span> <span class="s2">&quot;i386&quot;</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>With that you can easily run your tests by running <code>$xctool test</code></p>

<p>Better yet &ndash; for those who like to practice TDD you can combine XCTool with the power of <a href="https://github.com/guard/guard">Guard</a> so that you tests will automatically run when you make changes to any of your project source files. An easy way to get started with this is to use the <a href="https://github.com/siuying/guard-xctool-test">guar-xctool-test gem</a> from Francis Chong.</p>

<h3>AppCode</h3>

<p>I&rsquo;ve been using <a href="http://www.jetbrains.com/objc/">AppCode</a> over XCode for a little while now. This was mainly because I had become so used to the features of JetBrains IDE&rsquo;s over the years it was hard to go back. I&rsquo;ve used their products for developing Java with IntelliJ, Ruby with RubyMine, JavaScript with WebStorm and .NET with ReSharper. Features like refactoring, code analysis and source navigation make it at least worth a try.</p>

<hr />

<p><em>The tools you use are really a personal preference &ndash; These are mine. As I&rsquo;m sure you already know these are not the only options out there. I encourage you to find the tools that make you productive and happy.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Running JavaScript Tests Like a Boss]]></title>
    <link href="http://mdarnall.github.io/posts/running-javascript-tests-like-a-boss/"/>
    <updated>2012-08-18T15:00:00-07:00</updated>
    <id>http://mdarnall.github.io/posts/running-javascript-tests-like-a-boss</id>
    <content type="html"><![CDATA[<p>One of the things I&rsquo;ve always been driven to in software development is having a
codebase that is easily tested and where test execution is easy and
integrated well into the development workflow. As the majority of my time has been
spent writing JavaScript and less server-side code I&rsquo;ve been trying
different approaches to writing testable JavaScript code and
incorporating the same proven practices of continuous integration and
test-driven development into my workflow.</p>

<p>The goal of this post is to discuss the various
options that are out there for easily running and incorporating your
JavaScript suite into the development workflow. A lot of discussion in the community has taken place in terms on improving the toolchain of developing JavaScript and building and
running a solid test suite is an integral piece to that.</p>

<h3>Browser-Based Test Runner</h3>

<p>Most frameworks have html based runners. These are fine to get
started as they provide a good way to run your test suite in a browser
of your choice. As we will
see later other options will use this as the main method of running the
suite in an automated fashion.</p>

<p>Let&rsquo;s look at some examples. All popular testing frameworks include a browser-based
test runner:</p>

<ul>
<li><a href="http://qunitjs.com/">QUnit</a></li>
<li><a href="http://pivotal.github.com/jasmine/">Jasmine</a></li>
<li><a href="http://visionmedia.github.com/mocha/">Mocha</a></li>
<li><a href="http://busterjs.org/docs/browser-testing/">Buster.JS</a></li>
</ul>


<h5>Pros</h5>

<ul>
<li>Easy &ndash; This is by far the easiest option to get started with. Simply
use the included html runner in your test framework and visit the page
in your browser of choice.</li>
<li>Representative &ndash; This option does a good job at proving your tests are
reflective of an actual browser environment. It may only represent one
of the browser environments you may wish to target, but we&rsquo;ll explore
other options to help with this issue.</li>
</ul>


<h5>Cons</h5>

<ul>
<li>Slower &ndash; In comparison to other options it can be slower to load up a
browser and visit the runner page.</li>
<li>Harder to automate &ndash; While it may be possible to automate the process
of running the suite through a real browser it&rsquo;s not as easy as some
of the other approaches.</li>
<li>Requires the developer to host and to open the runner in the browser,
instead of a simple command or something built into your build process.</li>
</ul>


<h3>Headless Browser-Based Test Runner</h3>

<p>This is a variation of our first option. The idea is to use a &ldquo;headless&rdquo; browser to
load and parse the browser-based test runner. The difference is that you
don&rsquo;t incur the cost of loading an entire browser, but it means that you
must use a script to parse and display the results of the browser-based
runner.</p>

<p>Several headless browsers are available:</p>

<ul>
<li><a href="http://phantomjs.org/">PhantomJS</a> &ndash; Headless Webkit with a JavaScript
API based on <a href="http://trac.webkit.org/wiki/QtWebKit">QTWebKit</a>.</li>
<li><a href="http://zombie.labnotes.org/">Zombie.js</a> &ndash; Insanely fast, headless full-stack
testing using Node.js.</li>
</ul>


<p>This seems to be the option that is gaining the most popularity amongst developers. Several
projects are using this approach:</p>

<ul>
<li><a href="https://github.com/twitter/bootstrap/">Twitter Bootstrap</a> &ndash; Their plugin unit-tests use PhantomJS to run.</li>
<li><a href="https://github.com/cowboy/grunt">Grunt</a> &ndash; The task-based build tool for JavaScript has a built-in
QUnit task that will run your tests with PhantomJS.</li>
<li><a href="http://backstage.soundcloud.com/2011/09/mobile-unit-testing/">Soundcloud Mobile</a> &ndash; Used QUnit and PhantomJS on the mobile
project.</li>
</ul>


<h5>Pros</h5>

<ul>
<li>Fast &ndash; Spinning up a headless browser is generally faster than using
a fully fledged browser.</li>
<li>Easy automated &ndash; The process of spinning up the headless browser
can easily be scripted to run as part of your local development cycle
or as part of your continuous integration cycle on a remote machine.</li>
</ul>


<h5>Cons</h5>

<ul>
<li>The parsing code must be written to transform the browser runner to
the command line output. This component may already exist based on the
test framework you are using. For example, <a href="https://github.com/jquery/qunit/tree/master/addons/phantomjs">QUnit includes a runner for PhantomJS</a>.
Any features offered by the framework must be extracted from the
html output of the browser-based runner. For example, timings or
stack traces for failures. Again, this may not be an issue unless you
are writing the parsing code.</li>
<li>Not represntative &ndash; The validity of the results really only indicates that your tests pass
on the JavaScript engine of the headless browser, not a browser that
your end users would use. As we&rsquo;ll see there are other approaches that mitigate this downside.</li>
</ul>


<h3>DOM Emulation in Node.js</h3>

<p>This approach is an interesting one. While some testing frameworks
already support testing JavaScript running under node.js you can
incorporate a W3C DOM implementation into node so that tests cases that
need a DOM can run along side those that don&rsquo;t. This approach isn&rsquo;t talked about as much in the
community but I find it to be a nice hybrid approach for testing locally
and as a first pass test with continuous integration.</p>

<p>This approach needs the following:</p>

<ul>
<li><a href="https://github.com/tmpvar/jsdom/">JSDom</a></li>
<li>A testing framework that supports node, like:

<ul>
<li><a href="http://visionmedia.github.com/mocha/">Mocha</a></li>
<li><a href="http://busterjs.org/docs/node-testing/">Buster.js</a></li>
</ul>
</li>
<li>A bootstrapping script that imports the right node modules and test
suites.</li>
</ul>


<h5>Pros</h5>

<ul>
<li>Fast &ndash; Similar to the &ldquo;Headless&rdquo; testing approach these tests run
fast.</li>
<li>Native &ndash; No reason to write and maintain parsing code that extracts the testing
frameworks output. Instead use a testing framework that natively
supports running tests under node.js and add DOM support where needed.</li>
<li>Easily automated &ndash; Just like the &ldquo;Headless&rdquo; testing approach node.js
is easily integrated into normal developer workflow via the command
line or on a server running your continuous integration process.</li>
</ul>


<h5>Cons</h5>

<ul>
<li>Not representative &ndash; Again, like the &ldquo;headless&rdquo; approach these tests
really only validate your suite against JSDom&rsquo;s W3C DOM implementation &ndash; not
against any real browsers that your end users may use.</li>
</ul>


<h3>Browser Automation</h3>

<p>Another good approach is to automate one or more real browsers that
run your test framework&rsquo;s built-in runner. This is conceptually
similar to the first approach, except you use the help of a tool to automate
running the test in one or more browsers. This approach can be run locally in your development workflow, or
using a cloud-based service. There are several interesting projects
that help you with this approach:</p>

<ul>
<li><a href="http://yeti.cx/">Yeti</a> &ndash; A command-line tool for launching JavaScript
unit tests in one or more browsers and reporting results. Currently
only supports tests written in YUI Test.</li>
<li><a href="http://ryanseddon.github.com/bunyip/">Bunyip</a> &ndash; An effort to combine
BrowserStack and Yeti for cross browser testing as well as add support for other testing frameworks like Jasmine.</li>
<li><a href="http://vojtajina.github.com/testacular/">Testacular</a> &ndash; Another
command-line tool for launching JavaScript tests in one or more
browsers as well as headless browsers. Relatively new at time of
writing, but it has some interesting features.</li>
<li><a href="https://github.com/jquery/testswarm/wiki">Test Swarm</a> &ndash; Distributed
integration testing for JavaScript. <a href="https://github.com/jquery/testswarm/tree/master/scripts/addjob#test-suite-runs">It is limited in testing framework support</a></li>
<li>Cloud Based Services:

<ul>
<li><a href="http://www.browserstack.com/automated-browser-testing-api">BrowserStack</a> &ndash; Provides browser-as-a-service for automated cross-browser testing. Because it is just an API for spinning up new browsers it is usually combined with another tool like Bunyip that needs browser instances to work. In fact, the JQuery project uses the combination of Test Swarm and BrowserStack to do it&rsquo;s cross-browser testing.</li>
<li><a href="http://testling.com/">Testling</a> &ndash; A cross-browser testing platform
that has an web API to allow running your tests in the cloud
on various real browsers as well as locally using JSDom. Testling provides an
integrated testing framework, but <a href="http://substack.net/posts/1db3bb/roll-your-own-test-runner-for-testling">adapters to other frameworks can be created as well.</a></li>
</ul>
</li>
</ul>


<h5>Pros</h5>

<ul>
<li>Representative &ndash; Yours tests are run in a variety of real browsers, potentially event against a variety of devices, giving you more confidence in your test results. Unfortunately nothing can truly replace the experience of running actual code in a real browser.</li>
<li>Flexible &ndash; Some of the tools provide a way to run your tests locally
using something like JSDom or PhantomJS, but then also in the cloud
against real browsers.</li>
</ul>


<h5>Cons</h5>

<ul>
<li>Complexity &ndash; Because of the fact that you are automating one or more
browsers which have anomalies and can sometimes be fragile the
overall solution is more complex than some of the other approaches.</li>
<li>Setup Time &ndash; Depending on the library and tools used it may require
more of an investment of time to get get up and running.</li>
<li>Cost &ndash; Cloud-based services are not free but are relatively
inexpensive.</li>
</ul>


<p>While there are many options out there it really comes down to your
testing goals. Choosing a tool that is flexible and that can run in
multiple ways is the best choice as it allows you to adapt as your
needs change.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JSDom on Windows]]></title>
    <link href="http://mdarnall.github.io/posts/jsdom-on-windows/"/>
    <updated>2012-06-26T15:41:00-07:00</updated>
    <id>http://mdarnall.github.io/posts/jsdom-on-windows</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/tmpvar/jsdom">JSDom</a> is a JavaScript implementation of the W3C DOM on Node.js. For our use case it proved to be a good solution to running unit tests that
required the DOM.</p>

<p>A simple <code>npm install jsdom</code> installed jsdom just fine on *nix
systems but we needed it working on both *nix and Windows. Installing it on Windows required a few
additional prerequisites. At the time several google searches unturned
good tips, but none of them worked fully for us. This is an attempt at a
complete picture of the issues and solutions.The issues discussed here may change as node progresses as it has
changed several times in the recent past.</p>

<p>The main issue at time of writing is that jsdom in turn requires a node module called <a href="https://github.com/brianmcd/contextify/">contextify</a>. Contextify
requires a C++ addon, which must be built for the given platform. The
way node builds these native addons is the build tool <a href="https://github.com/TooTallNate/node-gyp/">node-gyp</a>.</p>

<h3>Prerequisites</h3>

<ul>
<li>Node.js (at writing time using 0.6.19) and NPM (1.1.24). These are
 packaged together when using the <a href="http://nodejs.org/#download">Windows installer</a>

<ul>
<li>Note: That my initial tests using node 0.8.0 and npm (1.1.32) also
worked the same.</li>
</ul>
</li>
<li>Python: Node-gyp currently recommends 2.7.x

<ul>
<li>Add python to your PATH</li>
<li>Add a new environment variable <code>PYTHON=C:\path_to_python\python.exe</code>

<ul>
<li>This wasn&rsquo;t listed in the node-gyp instructions but based on the output of the script it seemed necessary.</li>
</ul>
</li>
</ul>
</li>
<li>Microsoft Visual C++. The express version works as a free
 alternative.</li>
</ul>


<h3>Installing</h3>

<p>Once these prerequisites are installed jsdom is installed just like any
other module via:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install jsdom</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>You should see output from node-gyp and then msbuild being invoked to compile the native module. In our experience
msbuild would output a warning that was safe to ignore:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>MSB8012: TargetExt (.dll) does not match the Linker's OutputFile property value (.node)</span></code></pre></td></tr></table></div></figure>


<p>One of the other issues we had was finding a good, simple example to do a sanity check
to make sure things were installed correctly. We found that the best example seemed to be the one from the site that
loaded JQuery via a CDN and listed the links from Hacker News.</p>

<div><script src='https://gist.github.com/3007798.js'></script>
<noscript><pre><code>// Print all of the news items on hackernews
var jsdom = require(&#39;jsdom&#39;);

jsdom.env({
  html: &#39;http://news.ycombinator.com/&#39;,
  scripts: [
    &#39;http://code.jquery.com/jquery-1.5.min.js&#39;
  ],
  done: function(errors, window) {
    var $ = window.$;
    console.log(&#39;HN Links&#39;);
    $(&#39;td.title:not(:last) a&#39;).each(function() {
      console.log(&#39; -&#39;, $(this).text());
    });
  }
});</code></pre></noscript></div>


<p>I&rsquo;m working on a related blog post about our JavaScript testing strategy
and how we are using tools like Mocha, JSDom and others to write a
test-driven web application.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[MLK Day 2012]]></title>
    <link href="http://mdarnall.github.io/posts/mlk-day-2012/"/>
    <updated>2012-01-16T11:17:00-08:00</updated>
    <id>http://mdarnall.github.io/posts/mlk-day-2012</id>
    <content type="html"><![CDATA[<p>I thought it would appropriate to remember Dr. Martin Luther King Jr
with a quote. Today I am appreciative of his and others sacrifice.</p>

<blockquote><p>I have a dream that my four little children will one day live in a nation where they will not be judged by the color of their skin but by the content of their character.</p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CSS Vendor Prefixes]]></title>
    <link href="http://mdarnall.github.io/posts/css-vendor-prefixes/"/>
    <updated>2011-03-04T00:00:00-08:00</updated>
    <id>http://mdarnall.github.io/posts/css-vendor-prefixes</id>
    <content type="html"><![CDATA[<p>A quick note on using vendor-specific properties: when doing so it is
generally a good idea to include the non-prefixed property as well, after all of
the prefixed versions.</p>

<p>This will ensure that when the time comes and the browser supports the
property entirely it will be used. It will also override the prefixed version when that time comes.</p>

<p>An example with border radius:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.myClass</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">-</span><span class="n">moz</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span> <span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="o">-</span><span class="n">webkit</span><span class="o">-</span><span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'>  <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="o">:</span> <span class="m">20px</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Or even better using a pre-compilation tool like <a href="http://compass-style.org/reference/compass/css3/border_radius/">Compass</a> you can just do something like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nc">.myClass</span> <span class="p">{</span>
</span><span class='line'>  <span class="o">@</span><span class="n">include</span> <span class="k">border</span><span class="o">-</span><span class="n">radius</span><span class="p">(</span><span class="m">4px</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And based on how you have configured the supported browsers it will take
care of emitting the vendor specific properties.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[JavaScript Patterns]]></title>
    <link href="http://mdarnall.github.io/posts/javascript-patterns/"/>
    <updated>2010-12-05T12:03:00-08:00</updated>
    <id>http://mdarnall.github.io/posts/javascript-patterns</id>
    <content type="html"><![CDATA[<p>This is an ongoing set of notes based on my learning of JavaScript
patterns and best practices. It&rsquo;s a collection of knowledge from various
sources.</p>

<p>In addition code examples are being maintained as an executable set of
specifications in the <a href="https://github.com/mdarnall/patterns.js">patterns.js</a> repo on GitHub.</p>

<h3>Objects</h3>

<p>Objects are mutable keyed collections that contain properties. A
property can be any JavaScript value except for <code>undefined</code>.</p>

<p><em>Object Literal Notation</em> is ideal for on-demand object creation. You can
start with a blank object and add functionality as you need.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="p">{};</span>
</span><span class='line'><span class="c1">// adding a property </span>
</span><span class='line'><span class="nx">dog</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;benji&#39;</span><span class="p">;</span>
</span><span class='line'><span class="c1">// add a method</span>
</span><span class='line'><span class="nx">dog</span><span class="p">.</span><span class="nx">getName</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">dog</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>But you can also create the same object at once:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">dog</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;benji&#39;</span><span class="p">,</span>
</span><span class='line'>  <span class="nx">getName</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>I like this quote from the JavaScript Patterns book</p>

<blockquote><p>Another reason why the literal is the preferred pattern for object creation is that it emphasizes that objects are simply mutable hashes and not something that needs to be baked from a “recipe” (from a class).</p></blockquote>

<h5>Prototype</h5>

<p>JavaScript objects are all linked to a <em>prototype</em> object where it can
inherit properties. This is important for code-reuse patterns discussed
later. Object literals are linked to the <code>Object.prototype</code> by default.</p>

<h3>Functions</h3>

<ul>
<li>Functions are first class objects. They can be passed around as values
or augmented with properties and methods</li>
<li>Provide local scope. Declarations of local variables get <em>hoisted</em> to
the top of local scope.</li>
</ul>


<h6>Syntax for creating functions</h6>

<p>Named function expressions</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Anonymous functions. Same as above but without a name:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">add</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Function Declarations:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span><span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Invocation</h6>

<p>When a function is invoked it&rsquo;s  passed the declared parameters and two
additional ones:</p>

<ul>
<li>a reference to <code>this</code></li>
<li>a reference to <code>arguments</code></li>
</ul>


<p>The reference to <code>this</code> depends on how the function was invoked.</p>

<h6>Method Invocation</h6>

<p>When a function is a property of an object, it is refered to as a
method. When a method is invoked <code>this</code> refers to the containing object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">count</span> <span class="o">:</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">increment</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Function Invocation</h6>

<p>When a function is not a property of an object, the function&rsquo;s reference
to <code>this</code> is bound to the global object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">function</span> <span class="nx">add</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">a</span> <span class="o">+</span> <span class="nx">b</span><span class="p">;</span> <span class="c1">// &#39;this&#39; refers to the global object here</span>
</span><span class='line'>  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Constructor Invocation</h6>

<p>When an object is created with the <code>new</code> keyword it&rsquo;s refered to as a
<em>Constructor</em>. The object&rsquo;s reference to <code>this</code> is bound to that object.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">MyObj</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>    <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="s1">&#39;Matt&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kd">var</span> <span class="nx">obj</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">MyObj</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">obj</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// &#39;Matt&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When <code>new</code> is not used <code>this</code> inside the constructor will refer to the global object instead of the object itself. So a helpful pattern is to enforce the use of <code>new</code> with a <em>self-invoking contructor</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Person</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">name</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="o">!</span><span class="p">(</span><span class="k">this</span> <span class="k">instanceof</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">)){</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">new</span> <span class="nx">arguments</span><span class="p">.</span><span class="nx">callee</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="k">this</span><span class="p">.</span><span class="nx">say</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;My name is &quot;</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Scope</h6>

<p>Scope is determined by functions, not by blocks in JavaScript.
Parameters and variables defined in a function are not visible outside
of that function. Also, variables declared inside a function are visible
anywhere within it &ndash;  One interesting case is when an
inner function has a longer lifetime than its outer function.</p>

<h6>Immediate Functions</h6>

<p>A pattern that wraps a function and immediately executes it. It helps
avoid poluting the global namespace and also creates a closure,
protecting <em>private</em> variables.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">counter</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">count</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">increment</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>        <span class="nx">count</span> <span class="o">+=</span> <span class="mi">1</span><span class="p">;</span>
</span><span class='line'>      <span class="p">},</span>
</span><span class='line'>      <span class="nx">getCount</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>        <span class="k">return</span> <span class="nx">count</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">increment</span><span class="p">();</span>
</span><span class='line'>  <span class="nx">counter</span><span class="p">.</span><span class="nx">getCount</span><span class="p">();</span> <span class="c1">// 1</span>
</span><span class='line'>  <span class="k">typeof</span> <span class="nx">counter</span><span class="p">.</span><span class="nx">count</span><span class="p">;</span> <span class="c1">// undefined</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Code-Reuse and Inheritance</h3>

<p>Reusing code is an important topic to any discussion of software
development. In classical languages this is usually done with
inheritance. JavaScript supports many different ways in which code can
be reused. I like this quote from JavaScript: The Good Parts when
thinking about how JavaScript differs from other languages:</p>

<blockquote><p>In classical languages, objects are instances of classes, and a class
can inherit from another class. JavaScript is a <em>prototypal</em> language,
which means that <em>objects</em> inherit directly from other <em>objects</em></p></blockquote>

<p>The most natural inheritance pattern is to embrace the prototypal behavior
and focus on objects inheriting properties of other objects.</p>

<p>Prototypal inheritance is easy with the <code>Object.create</code> method in
ECMAScript 5:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">parent</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">name</span> <span class="o">:</span> <span class="s1">&#39;Daddy&#39;</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'><span class="kd">var</span> <span class="nx">child</span> <span class="o">=</span> <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">(</span><span class="nx">parent</span><span class="p">);</span>
</span><span class='line'><span class="nx">child</span><span class="p">.</span><span class="nx">name</span> <span class="c1">// &#39;daddy&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This method is easy to pollyfil in environments that don&rsquo;t support it
natively:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">Object</span><span class="p">.</span><span class="nx">create</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nb">Object</span><span class="p">.</span><span class="nx">create</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">o</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nx">arguments</span><span class="p">.</span><span class="nx">length</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span><span class="s1">&#39;Object.create implementation only accepts the first parameter.&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="kd">function</span> <span class="nx">F</span><span class="p">()</span> <span class="p">{}</span>
</span><span class='line'>        <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">o</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another approach to code-reuse to the apply <em>psuedoclassical</em> patterns
of inheritance to JavaScript. The most straight forward and versitile way
is called the <em>Proxy Constructor Pattern</em>. The idea is to have the child
prototype point at a <em>proxy</em> object that in turn is linked to the parent
via it&rsquo;s prototype.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">inherit</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">F</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){};</span>
</span><span class='line'>    <span class="k">return</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">C</span><span class="p">,</span><span class="nx">P</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">P</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">P</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>      <span class="nx">C</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">C</span><span class="p">;</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>  <span class="p">})();</span>
</span><span class='line'>
</span><span class='line'><span class="nx">inherit</span><span class="p">(</span><span class="nx">Child</span><span class="p">,</span> <span class="nx">Parent</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is possible to make this pattern a little easier to use by wrapping
it in some syntactical sugar, in a pattern called <em>Klass</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'>  <span class="kd">var</span> <span class="nx">Klass</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">Parent</span><span class="p">,</span> <span class="nx">props</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">Child</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">F</span>
</span><span class='line'>    <span class="p">,</span> <span class="nx">i</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// create a constructor function</span>
</span><span class='line'>    <span class="nx">Child</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">Child</span><span class="p">.</span><span class="nx">parent</span> <span class="o">&amp;&amp;</span> <span class="nx">Child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;initialize&#39;</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">Child</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="s1">&#39;initialize&#39;</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">initialize</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="k">this</span><span class="p">,</span> <span class="nx">arguments</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// inherit via the proxy prototype pattern</span>
</span><span class='line'>    <span class="nx">Parent</span> <span class="o">=</span> <span class="nx">Parent</span> <span class="o">||</span> <span class="nb">Object</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="nx">F</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(){};</span>
</span><span class='line'>    <span class="nx">F</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">F</span><span class="p">();</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="nx">parent</span> <span class="o">=</span> <span class="nx">Parent</span><span class="p">.</span><span class="nx">prototype</span><span class="p">;</span>
</span><span class='line'>    <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">constructor</span> <span class="o">=</span> <span class="nx">Child</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// copy properties</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="k">in</span> <span class="nx">props</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="nx">props</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">(</span><span class="nx">i</span><span class="p">)){</span>
</span><span class='line'>        <span class="nx">Child</span><span class="p">.</span><span class="nx">prototype</span><span class="p">[</span><span class="nx">i</span><span class="p">]</span> <span class="o">=</span> <span class="nx">props</span><span class="p">[</span><span class="nx">i</span><span class="p">];</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Child</span><span class="p">;</span>
</span><span class='line'>  <span class="p">};</span>
</span></code></pre></td></tr></table></div></figure>


<p>It can then be used like:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Man</span> <span class="o">=</span> <span class="nx">Klass</span><span class="p">(</span><span class="kc">null</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">name</span><span class="p">){</span>
</span><span class='line'>      <span class="k">this</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="nx">getName</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>      <span class="k">return</span> <span class="k">this</span><span class="p">.</span><span class="nx">name</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="kd">var</span> <span class="nx">SuperHuman</span> <span class="o">=</span> <span class="nx">Klass</span><span class="p">(</span><span class="nx">Man</span><span class="p">,</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">initialize</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){},</span>
</span><span class='line'>  <span class="nx">getName</span> <span class="o">:</span> <span class="kd">function</span> <span class="p">(){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">name</span> <span class="o">=</span> <span class="nx">SuperHuman</span><span class="p">.</span><span class="nx">parent</span><span class="p">.</span><span class="nx">getName</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="s2">&quot;I am &quot;</span> <span class="o">+</span> <span class="nx">name</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Another pattern in code-reuse is the concept of borrowing methods. In
cases where it doesn&rsquo;t make sense to inherit all of the properties you
can just borrow the ones you need:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">notmyobj</span><span class="p">.</span><span class="nx">dostuff</span><span class="p">.</span><span class="nx">apply</span><span class="p">(</span><span class="nx">myobj</span><span class="p">,</span> <span class="p">[</span><span class="nx">params</span><span class="p">]);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Global Variables</h3>

<p>It&rsquo;s a good idea to minimize the number of global variables in a
JavaScript application. The main reason is because of naming collisions
between code bases. If two seperate code bases declare global variables
with the same name unintended consequences are often a result.</p>

<p>Two main features of javascript as a language
make the issue easier to create:</p>

<ul>
<li>Not having to declare variables before using them</li>
<li>Implied globals &ndash; any variable you don&rsquo;t declare becomes a property
 of the global object

<ul>
<li>ES5 strict mode will throw an error if assignments are made to implied globals</li>
</ul>
</li>
</ul>


<p>The easiest way to avoid global variables is to always declare variables
with the <code>var</code> keyword.</p>
]]></content>
  </entry>
  
</feed>
